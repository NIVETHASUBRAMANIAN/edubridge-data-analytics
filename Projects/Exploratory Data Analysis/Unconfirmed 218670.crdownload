#!/usr/bin/env python
# coding: utf-8

# # Covid data Analysis

# ## importing libraries

# In[1]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings 
warnings.filterwarnings('ignore')
get_ipython().run_line_magic('matplotlib', 'inline')


# ## Reading the data

# In[2]:


d=pd.read_csv('covid.csv')


# ## To view all data

# In[3]:


d


# ## To check how many rows and columns

# In[4]:


d.shape


# ## To print fields name

# In[5]:


d.columns


# ## To check the data type of attributes

# In[6]:


d.dtypes


# ## To check is there any missing value

# In[7]:


d.isnull()


# In[8]:


d.isnull().sum()


# ## Data cleaning

# In[9]:


d.drop(['Province/State'], axis=1 ,inplace=True)
d


# ## Total number of null values in a dataset

# In[10]:


d.isnull().sum().sum()


# ## To print top 5 records

# In[11]:


d.head()


# In[12]:


d.head(10)


# ## To print bottom 5 records

# In[13]:


d.tail()


# In[14]:


d.tail(10)


# ## To print information of a dataset

# In[15]:


d.info()


# ## Drop the columns which not required

# In[16]:


d


# In[17]:


d.drop(['Last Update'], axis=1 ,inplace=True)
d


# In[18]:


d.drop(['Confirmed'], axis=1)


# In[19]:


d


# ## To print statistical information

# In[20]:


d.describe()


# In[21]:


d.describe(include='all')


# In[22]:


d.nunique()


# In[23]:


d.corr()


# In[24]:


d.cov()


# In[25]:


d.count()


# In[26]:


d.mean()


# In[27]:


d.max()


# In[28]:


d.min()


# In[29]:


d.std()


# In[30]:


d.var()


# ## To check is there any duplicated value

# In[31]:


d.duplicated().sum()


# ## Rename

# In[32]:


d.rename(
    columns={"Country/Region":"Country"}
          ,inplace=True)
d


# ## To count number of categories 

# In[33]:


d['Confirmed'].value_counts()


# In[34]:


d['Deaths'].unique()


# In[35]:


d1=d.copy()
d1=d1.pivot_table('Deaths',columns='Country',aggfunc='sum')
d1


# In[36]:


d4=d.copy()
d4


# In[37]:


d4


# In[38]:


d4=d4.groupby(['Country'])['Recovered'].sum()
d4=pd.DataFrame(d4)
d4


# In[39]:


n=d.groupby('Country').Recovered.sum().sort_values(ascending=False)
n


# In[40]:


n.head()


# In[41]:


pd.crosstab(d['Deaths'],d['Country'])


# In[42]:


d.sort_values(by=['Deaths'])


# In[43]:


grouped=pd.DataFrame(d.groupby(['Country','Confirmed'])['Deaths','Recovered'].sum().reset_index())
grouped


# In[44]:


country_recovered_d = pd.pivot_table(data=d[['Country','Recovered']], 
                        index=['Country'], 
                        values='Recovered',
                        aggfunc='max')


# In[45]:


country_recovered_d.sort_values(by='Recovered', ascending=False).head(10)


# In[46]:


d=d.head(100)


# # Data Visualization

# ## Plot a graph Deaths vs Recovered

# In[49]:


plt.bar(d['Deaths'],d['Recovered'])
plt.title('Deaths vs Recovered',fontsize=20,color='red')
plt.xlabel('Deaths',fontsize=15)
plt.ylabel('Recovered',fontsize=15)
plt.grid(True)
plt.show()


# In[56]:


plt.figure(figsize=(20,20))
plt.bar('Country','Recovered', data=d,color='green')
plt.show()


# In[55]:


print(d['Country'].value_counts())
plt.figure(figsize=(20,20))
sns.countplot(x=d['Country'])
plt.xticks(rotation=90)
plt.show()


# In[58]:


sns.relplot(x='Deaths',y='Recovered',hue='Country',data=d)
plt.show()


# In[59]:


sns.countplot(x='Deaths',data=d,palette='coolwarm')
plt.show()


# In[79]:


plt.title('Country',fontsize=40)
d['Country'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)
plt.show()


# In[81]:


sns.countplot(x='Recovered',data=d,palette='tab10')
plt.show()


# In[83]:


d.groupby('Confirmed')[['Deaths','Recovered']].sum().plot.bar(color=['red','blue'],figsize=(8,5))
plt.ylabel('Deaths/Recovered and confirmed')
plt.show()


# In[89]:


n_data=['Confirmed','Deaths','Recovered','Country']
plt.figure(figsize=(10,5))
sns.heatmap(d[n_data].corr(),annot=True,fmt='.4f',cmap='coolwarm_r',center=0)
plt.show()


# In[49]:


plt.figure(figsize = (10,4))
sns.lineplot('Recovered', 'Deaths', data = d, color = 'r', label= 'Recovered')
plt.legend()
plt.show()


# In[66]:


d


# In[67]:


d.dtypes


# In[68]:


d.hist(bins=20 ,figsize=(20,15),color='pink')
plt.show()


# In[69]:


d.hist(bins=50 ,figsize=(20,15),color='pink')
plt.show()


# In[72]:


sns.pairplot(d,hue='Country')
plt.show()


# In[80]:


sns.pairplot(d)
plt.show()


# In[ ]:




